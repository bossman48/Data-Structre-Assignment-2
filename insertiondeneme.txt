public void insertion(String data) {
    if(level==0){
      E target2=(E) data;
      addRoot(target2);
      //System.out.println(root.getElement());
      level=1;
    }
    else
      insertionAux2(root(), data, 0);
      //rootToChild();
      //checkTheSibling(root());
  }
  
  public void insertionAux2(Position <E> node, String target, int k){
    if(target.length()==k){
      System.out.println("Target is not suitable");
      return ;
    }
    if (node == null) {
      System.err.println("Node is null");
      return ;
    }
    if (target == "") {
      System.err.println("Data is null");
      return ;
    }
    String gelenString="";
    
    if(level!=0){
      Node<E> comparedPos=null;
      //System.out.println(node.getElement());
      if(compare(node,target)!=null)
      comparedPos=validate(compare(node,target));
      System.out.println("bakbana");
      int length=0;
      int temp=0;
      int asil=0;
      if(comparedPos!=null){
      if(comparedPos.getElement().toString().length()<=target.length())
        length=comparedPos.getElement().toString().length();
      else
        length=target.length();
   for(int i=0;i<length;i++){
   if(target.substring(0,i).equals(comparedPos.getElement().toString().substring(0, i))){
     if(i>asil){
       asil=i;
     }
      }
    }
    gelenString=comparedPos.getElement().toString();
    System.out.println(gelenString);
    E e= (E) "";
    comparedPos.setElement(e);
    insertionFinally2(node, target, asil, 0);
    //System.out.println("owwwww"+comparedPos.getElement().toString());
    insertionFinally2(node, gelenString, asil, 0);
  } 
    else{
      System.out.println("erroe");
      if(gelenString.compareTo("")==0){
        System.out.println("Gelen bir ÅŸey yok");
        insertionFinally(node, target); // compare but not come anything
      }
      else{
      }
    }
  }
    else
      System.out.println("seviyesiz");
  }

  void insertionFinally(Position<E> node,String target){
      Node<E> node2=validate(node);
      int l=target.length();
      String eklenecek=target.substring(0, 1);
      E target2=(E) target;
      System.out.println(eklenecek+"22");
      System.out.println(node2.hasNodeG());
      if(eklenecek.compareTo("A")==0){
         addNodeA(node,target2);
      }
      if(eklenecek.compareTo("C")==0){
        addNodeC(node,target2);
      }
      if(eklenecek.compareTo("G")==0){  

      addNodeG(node2,target2);
      }
      if(eklenecek.compareTo("T")==0){
       addNodeT(node,target2);
      }
      if(l==1)
        addNodeDol(node, target2);
  }
  void insertionFinally2(Position<E> node, String target, int k, int l){
    Node<E> node2=validate(node);
    E target2=(E) target;
    int m=target.length();
    int ww=0;
      System.err.println("olmaz");
    String eklenecek=target.substring(l, l+1);
    E eklenecek2=(E)eklenecek;
    if(k-l<=1){
      System.out.println(eklenecek);
      if(node2.hasNodeA() && eklenecek.compareTo("A")==0 && ww == 0){
          insertionFinally(node2.getNodeA(), target.substring(l+1));
          insertionFinally(node2.getNodeA(), node2.getNodeA().toString().substring(l+1));
          ww=1;
      }
      else if(ww!=1){
        Position<E> abs=null;
        System.out.println("asd");
            if(k-l==1)
             abs= validate(addNodeA(node,target2));
             else {
             abs= validate(addNodeA(node,eklenecek2));
            insertionFinally2(abs, target, k, l);
             }
          }
      if(node2.hasNodeC() && eklenecek.compareTo("C")==0 && ww == 0){
        System.out.println("CCC");ww=1;
        insertionFinally(node2.getNodeC(), target.substring(l+1));
        insertionFinally(node2.getNodeC(), node2.getNodeA().toString().substring(l+1));
    }
      else if(ww!=1){
            Position<E> abs=null;
                if(k-l==1)
                 abs= validate(addNodeC(node2,target2));
                 else {
                 abs= validate(addNodeC(node2,eklenecek2));
                insertionFinally2(abs, target, k, l);
                 }
              }        
      if(node2.hasNodeG() && eklenecek.compareTo("G")==0 && ww == 0){
        System.out.println("GGG");ww=1;
        insertionFinally(node2.getNodeG(), target.substring(l+1));
        insertionFinally(node2.getNodeG(), node2.getNodeG().toString().substring(l+1));
    }
      else if(ww!=1){
            Position<E> abs=null;
                if(k-l==1)
                 abs= validate(addNodeG(node,target2));
                 else {
                 abs= validate(addNodeG(node,eklenecek2));
                insertionFinally2(abs, target, k, l);
                 }
              }    
      if(node2.hasNodeT() && eklenecek.compareTo("T")==0 && ww == 0){
        System.out.println("TTT");ww=1;
        insertionFinally(node2.getNodeT(), target.substring(l+1));
        insertionFinally(node2.getNodeT(), node2.getNodeT().toString().substring(l+1));
    }
      else if(ww!=1){
            Position<E> abs=null;
                if(k-l==1)
                 abs= validate(addNodeT(node,target2));
                 else {
                 abs= validate(addNodeT(node,eklenecek2));
                insertionFinally2(abs, target, k, l);
                 }
              }    
      if(m==l){
          addNodeDol(node, target2);
      }
      else{
      /*  String lastChar=target.substring(k, k+1);
        if(lastChar.compareTo("A")==0)
          addNodeA(node, target2);
          if(lastChar.compareTo("C")==0)
          addNodeC(node, target2);
          if(lastChar.compareTo("G")==0)
          addNodeG(node, target2);
          if(lastChar.compareTo("T")==0)
          addNodeT(node, target2);*/
      }
    }